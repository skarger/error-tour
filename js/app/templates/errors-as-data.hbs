<div local-class="grid">
    <div>
        <h1>Elm</h1>
        <pre>
            <code>
parseAndReport : String -> String
parseAndReport given =
  case String.toInt given of
    Just number ->
      "Parsed " ++ String.fromInt number ++ "."

    Nothing ->
      "Error: Could not parse \"" ++ given ++ "\"."
            </code>
        </pre>
    </div>

    <div>
        <h1>Elm Again</h1>
        <pre>
            <code>
parseAndReport : String -> String
parseAndReport given =
    let
        number =
            String.toInt given |> Maybe.withDefault 0
    in
    "Parsed " ++ String.fromInt number ++ "."
            </code>
        </pre>
    </div>

    <div>
        <h1>Rust</h1>
        <pre>
            <code>
fn main() {
    match "1000".parse::&lt;u32&gt;() {
      Ok(number) => println!("Parsed {}.", number),
      Err(e) => println!("Error: {}", e),
    }

    match "A grand".parse::&lt;u32&gt;() {
      Ok(number) => println!("Parsed {}.", number),
      Err(e) => println!("Error: {}", e),
    }

    println!("Have a nice day.");
}
            </code>
        </pre>
    </div>

    <div>
        <h1>Rust Again</h1>
        <pre>
            <code>
fn main() {
    println!("Parsed {}.", "1000".parse::&lt;u32&gt;().unwrap());

    println!("Pushing my luck:");
    println!("Parsed: {}", "A grand".parse::&lt;u32&gt;().unwrap());

    println!("Have a nice day.");
}
            </code>
        </pre>
    </div>

    <div>
        <h1>Go</h1>
        <pre>
            <code>
package main

import "strconv"
import "fmt"

func main() {
    var i int64
    var err error

    i, err = strconv.ParseInt("1000", 0, 64)
    if (err != nil) {
      fmt.Printf("Error: %s.\n", err)
    } else {
     fmt.Printf("Parsed %d.\n", i)
    }


    i, err = strconv.ParseInt("A grand", 0, 64)
    if (err != nil) {
      fmt.Printf("Error: %s.\n", err)
    } else {
     fmt.Printf("Parsed %d.\n", i)
    }

    fmt.Println("Have a nice day.")
}
          </code>
        </pre>
    </div>

    <div>
        <h1>Go Again</h1>
        <pre>
            <code>
package main

import "strconv"
import "fmt"

func main() {
    var i int64

    i, _ = strconv.ParseInt("1000", 0, 64)
    fmt.Printf("Parsed %d.\n", i)

    i, _ = strconv.ParseInt("A grand", 0, 64)
    fmt.Printf("Parsed %d.\n", i)


    fmt.Println("Have a nice day.")
}
          </code>
        </pre>
    </div>

    <div>
        <h2>Output</h2>
        <pre>
-- parseAndReport "1000"
Parsed 1000.

-- parseAndReport "A grand"
Error: Could not parse "A grand".
        </pre>
    </div>

    <div>
        <h2>Output</h2>
        <pre>
-- parseAndReport "1000"
Parsed 1000.

-- parseAndReport "A grand"
Parsed 0.
        </pre>
    </div>

    <div>
        <h2>Output</h2>
        <pre>
Parsed 1000.
Error: invalid digit found in string
Have a nice day.
        </pre>
    </div>

    <div>
        <h2>Output</h2>
        <pre>
Parsed 1000.
Pushing my luck:
thread 'main' panicked at 'called `Result::unwrap()` on an `Err` value: ParseIntError { kind: InvalidDigit }', src/libcore/result.rs:1165:5
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace.
        </pre>
    </div>

    <div>
        <h2>Output</h2>
        <pre>
Parsed 1000.
Error: strconv.ParseInt: parsing "A grand": invalid syntax.
Have a nice day.
        </pre>
    </div>

    <div>
        <h2>Output</h2>
        <pre>
Parsed 1000.
Parsed 0.
Have a nice day.
        </pre>
    </div>
</div>
