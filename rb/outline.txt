https://ruby-doc.org/core-2.7.0/Exception.html

Class Exception and its subclasses are used to communicate between Kernel#raise and rescue statements in begin ... end blocks.

An Exception object carries information about an exception:
    Its type (the exception's class).
    An optional descriptive message.
    Optional backtrace information.


With no arguments, raises the exception in $! or raises a RuntimeError if $! is nil.
```
> $!
=> nil

> raise
Traceback (most recent call last):
        ...
        1: from (irb):3
RuntimeError ()
```

With a single String argument, raises a RuntimeError with the string as a message.

```
> raise "a single string"
Traceback (most recent call last):
        ...
        1: from (irb):5:in `rescue in irb_binding'
RuntimeError (a single string)
```

`raise` sets the value of the `$!` variable.
```
> $!
=> #<RuntimeError: a single string>
```

Otherwise, the first parameter should be an Exception class (or another object that returns an Exception object when sent an exception message).
The optional second parameter sets the message associated with the exception (accessible via Exception#message),
and the third parameter is an array of callback information (accessible via Exception#backtrace).



begin
  # code that might raise
rescue
  # handle exception
end


If you are inside a method, you do not need to use begin or end unless you wish to limit the scope of rescued exceptions:
```
def my_method
  # ...
rescue
  # ...
end
```

```
[0, 1, 2].map do |i|
  10 / i
rescue ZeroDivisionError
  nil
end
```
